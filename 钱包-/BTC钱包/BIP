npm/bip39：比特币BIP39的JavaScript实现：用于生成确定性密钥的助记词

基于 BIP-39 的助记词
基于 BIP-32 的HD钱包
基于 BIP-43 的多用途HD钱包
基于 BIP-44 的多币种和多账户钱包

⚠️ 助记词：是表示（编码）派生确定性钱包的种子的随机数的单词序列。单词序列足以重新创建种子，从而重新创建钱包和所有派生的密钥。使用助记词实现的确定性钱包会在首次创建钱包时向用户展示12至24个字的序列。该单字序列是钱包的备份，可用于在相同或任何兼容的钱包应用程序中恢复和重新创建所有密钥。
也可使用密码+助记符生成 私钥
BIP-39 以许多不同的编程语言实现为库：
python-mnemonic：SatoshiLabs团队提出的BIP-39标准的参考实现，使用Python
Consensys/eth-lightwallet：轻量级JS Ethereum节点和浏览器钱包（使用BIP-39）
npm/bip39：比特币BIP39的JavaScript实现：用于生成确定性密钥的助记词

⚠️ 种子：助记符字表示长度为128到256位的熵。然后使用使用密钥扩展函数PBKDF2将熵导出成更长的（512位）种子。然后使用生成的种子构建确定性钱包并派生其密钥。
密钥扩展函数有两个参数：助记词和_salt_。在密钥扩展函数中使用盐的目的是使得构建能够进行暴力攻击的查找表不可行。在BIP-39标准中，盐有另一个目的 —— 它允许引入密码，作为保护种子的附加安全因素，我们将在 BIP-39中的可选密码短语 中详细描述。

步骤7到9中从 生成助记词 描述的过程后继续：

PBKDF2密钥扩展函数的第一个参数是步骤6产生的助记词。
PBKDF2密钥扩展函数的第二个参数是盐。盐由用户提供的密码字符串和“mnemonic”组合起来。
PBKDF2使用2048轮HMAC-SHA512哈希算法，扩展助记词和盐，生成512位的种子。

⚠️ HD钱包树状结构导航：

BIP-43：建议使用第一个强化子密钥作为表示树结构“目的”的特殊标识符。基于BIP-43，HD钱包应该只使用树的一个1级分支，索引号通过定义其目的来标识树的其余部分的结构和名称空间。例如，仅使用分支m/i'/的HD钱包表示特定目的，而该目的由索引号“i”标识。

扩展该规范，BIP-44提出了一个多币种多帐户结构作为BIP-43下的“目的”号码+44'+。遵循BIP-44的HD钱包通过仅使用树的一个分支的事实来标识：m / 44'/。

BIP-44指定了包含五个预定义层级的结构：

m / purpose' / coin_type' / account' / change / address_index

第一级“purpose”始终设置为+44'+。第二级“coin_type”指定加密货币类型，允许多货币HD钱包，其中每种货币在第二级下具有其自己的子树。标准文件中定义了几种货币，称为SLIP0044：https://github.com/satoshilabs/slips/blob/master/slip-0044.md

e.g.: Ethereum 是 m/44'/60', Ethereum Classic is m/44'/61', Bitcoin 是 m/44'/0', 所有货币的 Testnet 是 m/44'/1'.

树的第三层“account”, 允许用户将他们的钱包分割成逻辑上的子账户，用于会计或组织管理目的。例如HD钱包可能包含两个以太坊“账户”： m/44'/60'/0' 和 m/44'/60'/1'. 每个账户都是自己的子树的根

在路径的第四层“change”时，HD钱包有两个子树，一个用于创建接收地址，另一个用于创建零钱地址。以太坊只使用“接收”路径，因为没有零钱地址这样的东西,请注意，虽然以前的层级使用强化派生，但此层级使用正常派生。这是为了允许树的这个层级导出扩展公钥在非安全环境中使用,
可用地址由HD钱包作为第四级的孩子派生，使树的第五级成为“address_index”
